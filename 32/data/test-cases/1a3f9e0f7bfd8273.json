{"uid":"1a3f9e0f7bfd8273","name":"test_site_title","fullName":"tests.test_demo.Ayuda#test_site_title","historyId":"2de973a726f6108f7c3b207b90ba2fc4","time":{"start":1657905359491,"stop":1657905362602,"duration":3111},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x561f4c384b13 <unknown>\n#1 0x561f4c18b688 <unknown>\n#2 0x561f4c1aff1f <unknown>\n#3 0x561f4c1ab5aa <unknown>\n#4 0x561f4c1e664a <unknown>\n#5 0x561f4c1e07a3 <unknown>\n#6 0x561f4c1b60ea <unknown>\n#7 0x561f4c1b7225 <unknown>\n#8 0x561f4c3cc2dd <unknown>\n#9 0x561f4c3d02c7 <unknown>\n#10 0x561f4c3b622e <unknown>\n#11 0x561f4c3d10a8 <unknown>\n#12 0x561f4c3aabc0 <unknown>\n#13 0x561f4c3ed6c8 <unknown>\n#14 0x561f4c3ed848 <unknown>\n#15 0x561f4c407c0d <unknown>\n#16 0x7fd062ac8609 <unknown>","statusTrace":"self = <test_demo.Ayuda testMethod=test_site_title>\n\n    def setUp(self):\n        global driver\n        #s = Service(\"../Drivers/chromedriver\")\n        #driver = webdriver.Chrome(service=s)\n        #driver = webdriver.Chrome(ChromeDriverManager().install())\n        '''\n        driver_path = ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()\n        driver = webdriver.Chrome(driver_path)\n        driver.maximize_window()\n    \n        driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n        '''\n        chrome_service = Service(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install())\n    \n        chrome_options = Options()\n        options = [\n            #\"--headless\",\n            \"--disable-gpu\",\n            \"--window-size=1920,1200\",\n            \"--ignore-certificate-errors\",\n            \"--disable-extensions\",\n            \"--no-sandbox\",\n            \"--disable-dev-shm-usage\"\n        ]\n        for option in options:\n            chrome_options.add_argument(option)\n    \n>       driver = webdriver.Chrome(service=chrome_service, options=chrome_options)\n\ntests/test_demo.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe6760f5fc0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x561f4c3ed848 \\\\u003Cunknown>\\\\n#15 0x561f4c407c0d \\\\u003Cunknown>\\\\n#16 0x7fd062ac8609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x561f4c384b13 <unknown>\nE       #1 0x561f4c18b688 <unknown>\nE       #2 0x561f4c1aff1f <unknown>\nE       #3 0x561f4c1ab5aa <unknown>\nE       #4 0x561f4c1e664a <unknown>\nE       #5 0x561f4c1e07a3 <unknown>\nE       #6 0x561f4c1b60ea <unknown>\nE       #7 0x561f4c1b7225 <unknown>\nE       #8 0x561f4c3cc2dd <unknown>\nE       #9 0x561f4c3d02c7 <unknown>\nE       #10 0x561f4c3b622e <unknown>\nE       #11 0x561f4c3d10a8 <unknown>\nE       #12 0x561f4c3aabc0 <unknown>\nE       #13 0x561f4c3ed6c8 <unknown>\nE       #14 0x561f4c3ed848 <unknown>\nE       #15 0x561f4c407c0d <unknown>\nE       #16 0x7fd062ac8609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_Ayuda","time":{"start":1657905359481,"stop":1657905359481,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x561f4c384b13 <unknown>\n#1 0x561f4c18b688 <unknown>\n#2 0x561f4c1aff1f <unknown>\n#3 0x561f4c1ab5aa <unknown>\n#4 0x561f4c1e664a <unknown>\n#5 0x561f4c1e07a3 <unknown>\n#6 0x561f4c1b60ea <unknown>\n#7 0x561f4c1b7225 <unknown>\n#8 0x561f4c3cc2dd <unknown>\n#9 0x561f4c3d02c7 <unknown>\n#10 0x561f4c3b622e <unknown>\n#11 0x561f4c3d10a8 <unknown>\n#12 0x561f4c3aabc0 <unknown>\n#13 0x561f4c3ed6c8 <unknown>\n#14 0x561f4c3ed848 <unknown>\n#15 0x561f4c407c0d <unknown>\n#16 0x7fd062ac8609 <unknown>","statusTrace":"self = <test_demo.Ayuda testMethod=test_site_title>\n\n    def setUp(self):\n        global driver\n        #s = Service(\"../Drivers/chromedriver\")\n        #driver = webdriver.Chrome(service=s)\n        #driver = webdriver.Chrome(ChromeDriverManager().install())\n        '''\n        driver_path = ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()\n        driver = webdriver.Chrome(driver_path)\n        driver.maximize_window()\n    \n        driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n        '''\n        chrome_service = Service(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install())\n    \n        chrome_options = Options()\n        options = [\n            #\"--headless\",\n            \"--disable-gpu\",\n            \"--window-size=1920,1200\",\n            \"--ignore-certificate-errors\",\n            \"--disable-extensions\",\n            \"--no-sandbox\",\n            \"--disable-dev-shm-usage\"\n        ]\n        for option in options:\n            chrome_options.add_argument(option)\n    \n>       driver = webdriver.Chrome(service=chrome_service, options=chrome_options)\n\ntests/test_demo.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe6760f5fc0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x561f4c3ed848 \\\\u003Cunknown>\\\\n#15 0x561f4c407c0d \\\\u003Cunknown>\\\\n#16 0x7fd062ac8609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x561f4c384b13 <unknown>\nE       #1 0x561f4c18b688 <unknown>\nE       #2 0x561f4c1aff1f <unknown>\nE       #3 0x561f4c1ab5aa <unknown>\nE       #4 0x561f4c1e664a <unknown>\nE       #5 0x561f4c1e07a3 <unknown>\nE       #6 0x561f4c1b60ea <unknown>\nE       #7 0x561f4c1b7225 <unknown>\nE       #8 0x561f4c3cc2dd <unknown>\nE       #9 0x561f4c3d02c7 <unknown>\nE       #10 0x561f4c3b622e <unknown>\nE       #11 0x561f4c3d10a8 <unknown>\nE       #12 0x561f4c3aabc0 <unknown>\nE       #13 0x561f4c3ed6c8 <unknown>\nE       #14 0x561f4c3ed848 <unknown>\nE       #15 0x561f4c407c0d <unknown>\nE       #16 0x7fd062ac8609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","steps":[],"attachments":[{"uid":"4f63248b6cdff8b7","name":"stdout","source":"4f63248b6cdff8b7.txt","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_Ayuda::0","time":{"start":1657905364088,"stop":1657905364088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_demo"},{"name":"subSuite","value":"Ayuda"},{"name":"host","value":"fv-az135-470"},{"name":"thread","value":"2842-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":1,"unknown":0,"total":8},"items":[{"uid":"ec5afd89a43d633","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/31//#testresult/ec5afd89a43d633","status":"passed","time":{"start":1657904722269,"stop":1657904731203,"duration":8934}},{"uid":"54c1bdd72f8fffd2","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/30//#testresult/54c1bdd72f8fffd2","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55c02ece5b13 <unknown>\n#1 0x55c02eaec688 <unknown>\n#2 0x55c02eb10f1f <unknown>\n#3 0x55c02eb0c5aa <unknown>\n#4 0x55c02eb4764a <unknown>\n#5 0x55c02eb417a3 <unknown>\n#6 0x55c02eb170ea <unknown>\n#7 0x55c02eb18225 <unknown>\n#8 0x55c02ed2d2dd <unknown>\n#9 0x55c02ed312c7 <unknown>\n#10 0x55c02ed1722e <unknown>\n#11 0x55c02ed320a8 <unknown>\n#12 0x55c02ed0bbc0 <unknown>\n#13 0x55c02ed4e6c8 <unknown>\n#14 0x55c02ed4e848 <unknown>\n#15 0x55c02ed68c0d <unknown>\n#16 0x7f0a90886609 <unknown>","time":{"start":1657904306984,"stop":1657904310433,"duration":3449}},{"uid":"dbe9e4bd31b5095c","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/29//#testresult/dbe9e4bd31b5095c","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55af1bf16b13 <unknown>\n#1 0x55af1bd1d688 <unknown>\n#2 0x55af1bd41f1f <unknown>\n#3 0x55af1bd3d5aa <unknown>\n#4 0x55af1bd7864a <unknown>\n#5 0x55af1bd727a3 <unknown>\n#6 0x55af1bd480ea <unknown>\n#7 0x55af1bd49225 <unknown>\n#8 0x55af1bf5e2dd <unknown>\n#9 0x55af1bf622c7 <unknown>\n#10 0x55af1bf4822e <unknown>\n#11 0x55af1bf630a8 <unknown>\n#12 0x55af1bf3cbc0 <unknown>\n#13 0x55af1bf7f6c8 <unknown>\n#14 0x55af1bf7f848 <unknown>\n#15 0x55af1bf99c0d <unknown>\n#16 0x7f158a993609 <unknown>","time":{"start":1657903183177,"stop":1657903186417,"duration":3240}},{"uid":"6b64e6a8b72ec266","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/28//#testresult/6b64e6a8b72ec266","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55b624426b13 <unknown>\n#1 0x55b62422d688 <unknown>\n#2 0x55b624251f1f <unknown>\n#3 0x55b62424d5aa <unknown>\n#4 0x55b62428864a <unknown>\n#5 0x55b6242827a3 <unknown>\n#6 0x55b6242580ea <unknown>\n#7 0x55b624259225 <unknown>\n#8 0x55b62446e2dd <unknown>\n#9 0x55b6244722c7 <unknown>\n#10 0x55b62445822e <unknown>\n#11 0x55b6244730a8 <unknown>\n#12 0x55b62444cbc0 <unknown>\n#13 0x55b62448f6c8 <unknown>\n#14 0x55b62448f848 <unknown>\n#15 0x55b6244a9c0d <unknown>\n#16 0x7fd9e9b70609 <unknown>","time":{"start":1657896732163,"stop":1657896733533,"duration":1370}},{"uid":"3fd112bad02d1f61","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/27//#testresult/3fd112bad02d1f61","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home","time":{"start":1657839031623,"stop":1657839031624,"duration":1}},{"uid":"2463d8e9947a801c","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/26//#testresult/2463d8e9947a801c","status":"broken","statusDetails":"NameError: name 'driver' is not defined","time":{"start":1657838860866,"stop":1657838860867,"duration":1}},{"uid":"ae55eb0012aa2a06","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/25//#testresult/ae55eb0012aa2a06","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home","time":{"start":1657838605845,"stop":1657838605846,"duration":1}}]},"tags":[]},"source":"1a3f9e0f7bfd8273.json","parameterValues":[]}