{"uid":"3a2dc4ea95bdb25d","name":"test_the_tests","fullName":"tests.test_demo.Ayuda#test_the_tests","historyId":"d89e5d3dcae2f873575c0ac61689d19c","time":{"start":1657904310521,"stop":1657904312095,"duration":1574},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5625dc63cb13 <unknown>\n#1 0x5625dc443688 <unknown>\n#2 0x5625dc467f1f <unknown>\n#3 0x5625dc4635aa <unknown>\n#4 0x5625dc49e64a <unknown>\n#5 0x5625dc4987a3 <unknown>\n#6 0x5625dc46e0ea <unknown>\n#7 0x5625dc46f225 <unknown>\n#8 0x5625dc6842dd <unknown>\n#9 0x5625dc6882c7 <unknown>\n#10 0x5625dc66e22e <unknown>\n#11 0x5625dc6890a8 <unknown>\n#12 0x5625dc662bc0 <unknown>\n#13 0x5625dc6a56c8 <unknown>\n#14 0x5625dc6a5848 <unknown>\n#15 0x5625dc6bfc0d <unknown>\n#16 0x7fec7524e609 <unknown>","statusTrace":"self = <test_demo.Ayuda testMethod=test_the_tests>\n\n    def setUp(self):\n        global driver\n        #s = Service(\"../Drivers/chromedriver\")\n        #driver = webdriver.Chrome(service=s)\n        #driver = webdriver.Chrome(ChromeDriverManager().install())\n        '''\n        driver_path = ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()\n        driver = webdriver.Chrome(driver_path)\n        driver.maximize_window()\n    \n        driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n        '''\n        #chrome_service = Service(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install())\n    \n        chrome_options = Options()\n        options = [\n            \"--headless\",\n            \"--disable-gpu\",\n            \"--window-size=1920,1200\",\n            \"--ignore-certificate-errors\",\n            \"--disable-extensions\",\n            \"--no-sandbox\",\n            \"--disable-dev-shm-usage\"\n        ]\n        for option in options:\n            chrome_options.add_argument(option)\n    \n        #driver = webdriver.Chrome(service=chrome_service, options=chrome_options)\n>       driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n\ntests/test_demo.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f046e6ac490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x5625dc6a5848 \\\\u003Cunknown>\\\\n#15 0x5625dc6bfc0d \\\\u003Cunknown>\\\\n#16 0x7fec7524e609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5625dc63cb13 <unknown>\nE       #1 0x5625dc443688 <unknown>\nE       #2 0x5625dc467f1f <unknown>\nE       #3 0x5625dc4635aa <unknown>\nE       #4 0x5625dc49e64a <unknown>\nE       #5 0x5625dc4987a3 <unknown>\nE       #6 0x5625dc46e0ea <unknown>\nE       #7 0x5625dc46f225 <unknown>\nE       #8 0x5625dc6842dd <unknown>\nE       #9 0x5625dc6882c7 <unknown>\nE       #10 0x5625dc66e22e <unknown>\nE       #11 0x5625dc6890a8 <unknown>\nE       #12 0x5625dc662bc0 <unknown>\nE       #13 0x5625dc6a56c8 <unknown>\nE       #14 0x5625dc6a5848 <unknown>\nE       #15 0x5625dc6bfc0d <unknown>\nE       #16 0x7fec7524e609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_Ayuda","time":{"start":1657904306969,"stop":1657904306969,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5625dc63cb13 <unknown>\n#1 0x5625dc443688 <unknown>\n#2 0x5625dc467f1f <unknown>\n#3 0x5625dc4635aa <unknown>\n#4 0x5625dc49e64a <unknown>\n#5 0x5625dc4987a3 <unknown>\n#6 0x5625dc46e0ea <unknown>\n#7 0x5625dc46f225 <unknown>\n#8 0x5625dc6842dd <unknown>\n#9 0x5625dc6882c7 <unknown>\n#10 0x5625dc66e22e <unknown>\n#11 0x5625dc6890a8 <unknown>\n#12 0x5625dc662bc0 <unknown>\n#13 0x5625dc6a56c8 <unknown>\n#14 0x5625dc6a5848 <unknown>\n#15 0x5625dc6bfc0d <unknown>\n#16 0x7fec7524e609 <unknown>","statusTrace":"self = <test_demo.Ayuda testMethod=test_the_tests>\n\n    def setUp(self):\n        global driver\n        #s = Service(\"../Drivers/chromedriver\")\n        #driver = webdriver.Chrome(service=s)\n        #driver = webdriver.Chrome(ChromeDriverManager().install())\n        '''\n        driver_path = ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()\n        driver = webdriver.Chrome(driver_path)\n        driver.maximize_window()\n    \n        driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n        '''\n        #chrome_service = Service(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install())\n    \n        chrome_options = Options()\n        options = [\n            \"--headless\",\n            \"--disable-gpu\",\n            \"--window-size=1920,1200\",\n            \"--ignore-certificate-errors\",\n            \"--disable-extensions\",\n            \"--no-sandbox\",\n            \"--disable-dev-shm-usage\"\n        ]\n        for option in options:\n            chrome_options.add_argument(option)\n    \n        #driver = webdriver.Chrome(service=chrome_service, options=chrome_options)\n>       driver = webdriver.Chrome(\n            service=ChromiumService(ChromeDriverManager(chrome_type=ChromeType.CHROMIUM).install()))\n\ntests/test_demo.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f046e6ac490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x5625dc6a5848 \\\\u003Cunknown>\\\\n#15 0x5625dc6bfc0d \\\\u003Cunknown>\\\\n#16 0x7fec7524e609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5625dc63cb13 <unknown>\nE       #1 0x5625dc443688 <unknown>\nE       #2 0x5625dc467f1f <unknown>\nE       #3 0x5625dc4635aa <unknown>\nE       #4 0x5625dc49e64a <unknown>\nE       #5 0x5625dc4987a3 <unknown>\nE       #6 0x5625dc46e0ea <unknown>\nE       #7 0x5625dc46f225 <unknown>\nE       #8 0x5625dc6842dd <unknown>\nE       #9 0x5625dc6882c7 <unknown>\nE       #10 0x5625dc66e22e <unknown>\nE       #11 0x5625dc6890a8 <unknown>\nE       #12 0x5625dc662bc0 <unknown>\nE       #13 0x5625dc6a56c8 <unknown>\nE       #14 0x5625dc6a5848 <unknown>\nE       #15 0x5625dc6bfc0d <unknown>\nE       #16 0x7fec7524e609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","steps":[],"attachments":[{"uid":"d47f7eddf38da9e0","name":"stdout","source":"d47f7eddf38da9e0.txt","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_unittest_setUpClass_fixture_Ayuda::0","time":{"start":1657904312133,"stop":1657904312133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_demo"},{"name":"subSuite","value":"Ayuda"},{"name":"host","value":"fv-az249-272"},{"name":"thread","value":"2899-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"ad1ffcd428820079","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/29//#testresult/ad1ffcd428820079","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55ccdb1a4b13 <unknown>\n#1 0x55ccdafab688 <unknown>\n#2 0x55ccdafcff1f <unknown>\n#3 0x55ccdafcb5aa <unknown>\n#4 0x55ccdb00664a <unknown>\n#5 0x55ccdb0007a3 <unknown>\n#6 0x55ccdafd60ea <unknown>\n#7 0x55ccdafd7225 <unknown>\n#8 0x55ccdb1ec2dd <unknown>\n#9 0x55ccdb1f02c7 <unknown>\n#10 0x55ccdb1d622e <unknown>\n#11 0x55ccdb1f10a8 <unknown>\n#12 0x55ccdb1cabc0 <unknown>\n#13 0x55ccdb20d6c8 <unknown>\n#14 0x55ccdb20d848 <unknown>\n#15 0x55ccdb227c0d <unknown>\n#16 0x7fe86e688609 <unknown>","time":{"start":1657903186502,"stop":1657903188024,"duration":1522}},{"uid":"179229099d4919e9","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/28//#testresult/179229099d4919e9","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56439b02eb13 <unknown>\n#1 0x56439ae35688 <unknown>\n#2 0x56439ae59f1f <unknown>\n#3 0x56439ae555aa <unknown>\n#4 0x56439ae9064a <unknown>\n#5 0x56439ae8a7a3 <unknown>\n#6 0x56439ae600ea <unknown>\n#7 0x56439ae61225 <unknown>\n#8 0x56439b0762dd <unknown>\n#9 0x56439b07a2c7 <unknown>\n#10 0x56439b06022e <unknown>\n#11 0x56439b07b0a8 <unknown>\n#12 0x56439b054bc0 <unknown>\n#13 0x56439b0976c8 <unknown>\n#14 0x56439b097848 <unknown>\n#15 0x56439b0b1c0d <unknown>\n#16 0x7f7f3da3b609 <unknown>","time":{"start":1657896733644,"stop":1657896734633,"duration":989}},{"uid":"26a72630e0f8a979","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/27//#testresult/26a72630e0f8a979","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home","time":{"start":1657839031743,"stop":1657839031744,"duration":1}},{"uid":"de7b908efc2383fb","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/26//#testresult/de7b908efc2383fb","status":"broken","statusDetails":"NameError: name 'driver' is not defined","time":{"start":1657838860891,"stop":1657838860891,"duration":0}},{"uid":"ae56afc0d717c14","reportUrl":"https://javiermayan.github.io/test-automation-python-practice/25//#testresult/ae56afc0d717c14","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home","time":{"start":1657838605942,"stop":1657838605943,"duration":1}}]},"tags":[]},"source":"3a2dc4ea95bdb25d.json","parameterValues":[]}